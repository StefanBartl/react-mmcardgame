{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/Stopwatch.js","components/Besttime.js","App.js","components/GetRandomNumbers.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","id","cardNo","_React$useState","React","useState","_React$useState2","Object","slicedToArray","allImages","setAllImagess","_fetchData","asyncToGenerator","_regeneratorRuntime","mark","_callee","res","data","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","useEffect","fetchData","url","length","urls","regular","react_default","a","createElement","className","src","onClick","handleClick","alt","Stopwatch","time","setTime","_React$useState3","_React$useState4","running","setRunning","run","reset","interval","setInterval","prevTime","clearInterval","Math","floor","slice","Bestttime","element","minutes","seconds","milliseconds","localStorage","getItem","concat","Language","App","selectedCards","setSelectedCards","counter","setCounter","randomNumbersArray","map","value","sort","random","b","getSelectedCardNumber","event","preventDefault","indexOf","target","prevState","newArr","x","push","_React$useState5","_React$useState6","stopwatchRun","setStopwatchRun","_React$useState7","_React$useState8","stopwatchReset","setStopwatchReset","_React$useState9","_React$useState10","bestTime","setBesttime","parseInt","min","document","getElementById","innerText","sec","msec","App_regeneratorRuntime","newTime","oldTime","winMessage","setItem","confirm","winValidation","querySelector","click","Stopwatch_Stopwatch","type","cardsArray","querySelectorAll","_step","_iterator","_createForOfIteratorHelper","s","n","done","card","style","pointerEvents","filter","transform","err","f","_step2","_iterator2","removeItem","el","Card_Card","key","browserLanguagePattern","language","navigator","test","container","createRoot","render","StrictMode","App_App"],"mappings":"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","file":"static/js/main.b874b07d.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport'./Card.css';\n\nexport default function Card(props){\n\n    let showNumber = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    // Get card number and set it as id\n    const id = showNumber[props.cardNo - 1];\n\n\n//#region unsplash.com API to get random images\n const [ allImages, setAllImagess ] = React.useState([]); \n\nasync function fetchData() {\n  const res = await fetch(\"https://api.unsplash.com/photos/?client_id=yFMXUTNpe9ZjDVqNOSQJxC4WiW_hJFdNEviXNlu_Vso\")\n  const data = await res.json()\n  setAllImagess(data);\n};\n\nReact.useEffect(() => {\n  fetchData();\n}, []); \n\nlet url = \"\";  allImages.length !== 0  ? url = allImages[id - 1].urls.regular : url = \"\";\n\n//#endregion\n\n    \n    return (\n        <div className='cards'  >\n            <img \n            src={url} className=\"cards-images\" id={id} onClick={props.handleClick} alt='Random element, which player have to remember to play the game.'\n            />\n        </div>\n    )\n};","import React from \"react\";\nimport './Stopwatch.css';\n\nexport default function Stopwatch(props){\n    \n  const [time, setTime] = React.useState(0);\n  const [running, setRunning] = React.useState(false);\n\n  if(props.run === true && running !== true){\n      setRunning(true);\n  };\n  if(props.run === false && running !== false){\n    setRunning(false);\n  };\n\n  if(props.reset === true && running !== true){\n    setTime(0);\n};\n\n  // Stopwatch logic\n      React.useEffect(() => {\n        let interval;\n        if (running) {\n          interval = setInterval(() => {\n            setTime((prevTime) => prevTime + 10);\n          }, 10);\n        } else if (!running) {\n          clearInterval(interval);\n        }\n        return () => clearInterval(interval);\n      }, [running]);\n\n\n  return (\n    <div className=\"stopwatch\">\n      <div className=\"numbers\">\n        <span id=\"minutes\">{(\"0\" + Math.floor((time / 60000) % 60)).slice(-2)}</span>\n        <p>:</p>\n        <span id=\"seconds\">{(\"0\" + Math.floor((time / 1000) % 60)).slice(-2)}</span>\n        <p>:</p>\n        <span id=\"milliseconds\">{(\"0\" + ((time / 10) % 100)).slice(-2)}</span>\n      </div>\n      {/* <div className=\"buttons\">\n        <button onClick={() => setRunning(true)}>Start</button>\n        <button onClick={() => setRunning(false)}>Stop</button>\n        <button onClick={() => setTime(0)}>Reset</button>       \n      </div> */}\n    </div>\n  );\n\n};","import React from \"react\";\nimport './Besttime.css'\n\nexport default function Bestttime(){\n    \n    let element, minutes, seconds, milliseconds;\n\n    // if there is a best - time stored...\n    if(localStorage.getItem('best-minutes')){\n\n        // Get values and test for two digits\n        localStorage.getItem('best-minutes').length === 2\n                ? minutes = localStorage.getItem('best-minutes') // if it has 2 digits (like 23), take it\n                : minutes = `0${localStorage.getItem('best-minutes')}`; // else put a zero before, like 07\n\n        localStorage.getItem('best-seconds').length === 2\n        ? seconds = localStorage.getItem('best-seconds')\n        : seconds = `0${localStorage.getItem('best-seconds')}`;\n\n        localStorage.getItem('best-milliseconds').length === 2\n                ? milliseconds = localStorage.getItem('best-milliseconds')\n                : milliseconds = `0${localStorage.getItem('best-milliseconds')}`;\n        // put element together \n     element =  <p>{minutes}:{seconds}:{milliseconds}</p>\n    } else {\n     // if there is no best-time stored....\n    element = <p>{localStorage.Language === \"de\" ? \"noch keine Beszeit\" : \"no current best-time\"}</p>\n    };\n    \n    return(          \n            <div className='best-time-div'>\n                    <h3>{localStorage.Language === \"de\" ? \"Bestzeit\" : \"Best time:\"}</h3>\n                    {element}\n            </div>\n    )\n};","import React from 'react';\nimport { confirm } from \"react-confirm-box\";\nimport './App.css';\nimport Card from './components/Card';\nimport GetRandomNumbers from './components/GetRandomNumbers';\nimport Stopwatch from './components/Stopwatch';\nimport Besttime from './components/Besttime';\n\n/*\n! Do this for better coding and user experience\n  todo implement own file templates to code structure\n  todo own logo !\n  todo implement randomized images after win to make it more difficult and interesting\n  todo implement harder game with images which are more similiar (via API topic function)\n*/\n\nexport default function App() {\n\n\n//#region Randomize, select and store selected cards & set remaining counter\n\n  // set up state for selected cards\n  const [ selectedCards, setSelectedCards ] = React.useState([]);\n\n  // set up state for points counter\n  const [ counter, setCounter ] = React.useState(10);\n\n  // get a array with randomized sequence of numbers from 1 - 10\n  const randomNumbersArray = GetRandomNumbers();\n\n\n  // ?  Get from user selected card\n  function getSelectedCardNumber(event){\n    event.preventDefault();\n\n    // Set new state of points counter\n    selectedCards.indexOf(event.target.id) === -1\n      ? setCounter(prevState => prevState - 1)\n      : setCounter(10);\n\n      // Set new state of the selected card number collecting array\n    setSelectedCards(prevState => {\n      let newArr = [];  // define new array\n      for(let x = 0; x < prevState.length; x++){ // loop trough previous array...\n          newArr.push(prevState[x]); //  ..to push older selected card numbers in new array\n      };\n      newArr.push(event.target.id); // add the new selected card number to array\n      return newArr; // set the new state of the array for selected card numbers\n    });\n  };\n\n//#endregion\n\n\n//#region Stopwatch, Win-Validation, Best-Time, Best-Time Reset and \n\nconst [stopwatchRun, setStopwatchRun] = React.useState(true);\n\nconst [stopwatchReset, setStopwatchReset] = React.useState(false);\n\nconst [bestTime, setBesttime] = React.useState([]);\n\n\n// ? Get local storage stored best-time if exists\nif(localStorage.getItem('best-minutes') && bestTime[0] !== parseInt(localStorage.getItem('best-minutes')) && bestTime.length !== 0){\n  setBesttime(\n    [\n      localStorage.getItem('best-minutes'),\n      localStorage.getItem('best-seconds'),\n      localStorage.getItem('best-milliseconds')\n    ]\n  )\n};\n\n// ? Win validation \nif(counter === 9){\n\n  // stop stopwatch \n  setStopwatchRun(false); // Stopp stopwatch\n  // get time and parse it into type 'number'\n  let min = parseInt(document.getElementById(\"minutes\").innerText);\n  let sec = parseInt(document.getElementById(\"seconds\").innerText);\n  let msec = parseInt(document.getElementById(\"milliseconds\").innerText);        \n\n  // Gratulate user, compare besttime and reset game\n  const winValidation = async () => {\n\n    // Get type 'number' for comparing times\n    let newTime = parseInt(`${min}${sec}${msec}`);\n    let oldTime = parseInt(`${bestTime[0]}${bestTime[1]}${bestTime[2]}`);\n    let winMessage = \"\";\n    // Check if new time is faster / first best time or normal win\n    if(newTime < oldTime|| bestTime.length === 0){ \n          setBesttime([min, sec, msec]);\n          localStorage.setItem('best-minutes', min);\n          localStorage.setItem('best-seconds', sec);\n          localStorage.setItem('best-milliseconds', msec);\n          localStorage.Language === \"de\" \n            ? winMessage = `Gratulation, du hats das Spiel in ${min}:${sec}:${msec} gewonnen UND eine neue Bestzeit erreicht !`\n            : winMessage = `Congratulations, you won the game in ${min}:${sec}:${msec} AND its a new best-time !`;\n      } else {\n        localStorage.Language === \"de\" \n        ? winMessage = `Gratulation, du hats das Spiel in ${min}:${sec}:${msec} gewonnen! (Aber leider keine Bestzeit, das nächste mal schaffst du es!)`\n        : winMessage = `Congratulations, you won the game in ${min}:${sec}:${msec} ! ( But unfortunately no best time, next time you can do it!)`;\n      };\n\n      // Wait for the user confirmation \n      await confirm(winMessage);\n       setStopwatchReset(true); // Trigger time reset\n       setStopwatchRun(true); // Start stopwatch again\n    };\n\n    winValidation(); // Invoke func\n    setCounter(0); // Reset counter\n    setStopwatchReset(false); // Set reset trigger back to false\n};\n\n   // ? Best-Time reset in local storage\nfunction timeReset (event){\n    event.preventDefault();\n    setBesttime([]);\n    localStorage.removeItem('best-minutes');\n    localStorage.removeItem('best-seconds');\n    localStorage.removeItem('best-milliseconds');\n};\n\n  // ? Start/Stop \nfunction startStop (event){\n      event.preventDefault();\n\n      // Toggle stopwatch and counter\n      stopwatchRun ? setStopwatchRun(false) : setStopwatchRun(true);\n      if(counter !== 10) setCounter(10);\n      stopwatchRun ? setStopwatchReset(false) : setStopwatchReset(true);\n  \n      // Get all cards in array\n      const cardsArray = document.querySelectorAll('.cards-images');\n      // if user stops game, images blurred out\n      if(stopwatchRun){\n        for(let card of cardsArray){\n          card.style.pointerEvents = 'none';\n          card.style.filter = 'blur(.4rem)';\n          card.style.transform = \"rotate(180deg )\";\n        };\n      };\n      // if user starts game, clean images\n      if(!stopwatchRun){\n        for(let card of cardsArray){\n          card.style.pointerEvents = 'all';\n          card.style.filter = 'blur(0rem)';\n          card.style.transform = \"rotate(0deg )\";\n        };\n      };\n\n};\n\n//#endregion\n\n// ? Start game correctly\n\nReact.useEffect(()=>{\n  document.querySelector('.startstop-btn').click();\n},[])\n\n  return (\n   <div className=\"App\">\n      \n        <header className='header'>\n            <div className='main-title-div'>     \n                <h1>Memory-Card-Game</h1>\n                <h6>{\n                  localStorage.Language === \"de\"\n                    ? \"Klicke auf die 10 Bilder so schnell du kannst, klicke aber auf keines 2 mal oder du beginnst von vorne!\"\n                    : \"Click all 10 images as fast as you can, but don't click on any twice or you have to restart!\"\n                }</h6>\n            </div>\n            <div className='stats'>\n                <div className='header-points'>\n                    <p className='points-text'>{localStorage.Language === \"de\" ? \"Noch zu klicken\" : \"Remaining to click\"}:</p>\n                    <p className='points-counter'>{counter}</p>\n                </div>\n                <div className='timeWrapper'>\n                    <Stopwatch run={stopwatchRun} reset={stopwatchReset} />\n                    <Besttime />\n                    <div className=\"start-stop-reset\">\n                        <input type=\"button\" value={stopwatchRun ? \"stop\" : \"start\"} className='startstop-btn' onClick={startStop} />\n                        <input type=\"button\" value=\"reset\" className='reset-btn' onClick={timeReset} />\n                    </div>\n                </div>\n            </div>\n        </header>\n\n        <main className='cardboard'>\n            {randomNumbersArray.map(el =><Card cardNo={el} key={el} handleClick={getSelectedCardNumber} />)}\n        </main>\n\n  </div>\n  );\n};\n","export default function App() {\n\n  let unshuffled = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let shuffled = unshuffled\n  .map(value => ({ value, sort: Math.random() }))\n  .sort((a, b) => a.sort - b.sort)\n  .map(({ value }) => value)\n\n    return shuffled\n};","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport reportWebVitals from './reportWebVitals';\nimport './index.css';\nimport App from './App';\n\n\n//#region Set language\n\n// get setted language from local storage or browser language and store it there\nconst browserLanguagePattern = localStorage.language || navigator.language;\n\n// RegEx to test for German language\nconst langRegExDE = /de/ig; \n\n// Test for german browser language against the getted browser language and finally set localStorage language\nlangRegExDE.test(browserLanguagePattern) \n  ? localStorage.setItem(\"Language\", \"de\") \n  : localStorage.setItem(\"Language\", \"en\");\n\n//#endregion\n\nconst container = document.getElementById('root');\nconst root = createRoot(container); \n\nroot.render(    \n<React.StrictMode>\n  <App />\n</React.StrictMode>);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}